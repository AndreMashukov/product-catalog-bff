resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.subsys}-user-pool-${opt:stage}
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: "OFF"
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: 7
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: ${self:custom.subsys}-app-client-${opt:stage}
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_PASSWORD_AUTH
        PreventUserExistenceErrors: ENABLED

  Outputs:
    userPoolId:
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:custom.subsys}-cognito-resources-${opt:stage}-userPoolId
    userPoolArn:
      Value: !GetAtt CognitoUserPool.Arn
      Export:
        Name: ${self:custom.subsys}-cognito-resources-${opt:stage}-userPoolArn
    userPoolClientId:
      Value: !Ref UserPoolClient
      Export:
        Name: ${self:custom.subsys}-cognito-resources-${opt:stage}-userPoolClientId

# IAM role statements to be used in the main serverless.yml
iamRoleStatements:
  - Effect: Allow
    Action:
      - cognito-idp:AdminInitiateAuth
      - cognito-idp:AdminCreateUser
      - cognito-idp:AdminSetUserPassword
      - cognito-idp:AdminGetUser
      - cognito-idp:AdminUpdateUserAttributes
    Resource: ${self:provider.environment.USER_POOL}
