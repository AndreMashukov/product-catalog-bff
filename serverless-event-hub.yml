service: template-event-hub

provider:
  name: aws
  runtime: nodejs16.x
  deploymentBucket: 
    name: my-template-sls-deploy-${opt:stage, 'dev'}-${opt:region, 'us-west-2'}
  iam:
    deploymentRole: arn:aws:iam::${aws:accountId}:role/template-cfn-exec-${opt:stage, 'dev'}
  stackTags: ${file(serverless/tags.yml)}
  logRetentionInDays: 3
  environment:
    STAGE: ${opt:stage, 'dev'}

params:
  np:
    debug: '*'
    account: np
    logRetentionInDays: 3
  prd:
    debug: ''
    account: prod
    logRetentionInDays: 30

custom:
  partition: aws
  org: my
  subsys: template

plugins:
  - serverless-aws-describe-plugin

resources:
  Conditions:
    CreateEventHubResources: 
      Fn::Equals:
        - true
        - true
  
  Resources:
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:custom.subsys}-bus-${opt:stage}
    
    # EventBridge Rule example - you can customize this based on your needs
    ProductCatalogRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref EventBus
        Name: ${self:custom.subsys}-product-catalog-rule-${opt:stage}
        Description: "Rule for product catalog events"
        EventPattern:
          source:
            - "product-catalog"
          detail-type:
            - "ProductCreated"
            - "ProductUpdated"
            - "ProductDeleted"
            - "VariantCreated"
            - "VariantUpdated"
            - "VariantDeleted"

    KinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:custom.subsys}-stream-${opt:stage}
        ShardCount: 1
        RetentionPeriodHours: 24

  Outputs:
    busName:
      Value: !Ref EventBus
      Export:
        Name: ${self:custom.subsys}-event-hub-${opt:stage}.busName
    busArn:
      Value: !GetAtt EventBus.Arn
      Export:
        Name: ${self:custom.subsys}-event-hub-${opt:stage}.busArn
    stream1Arn:
      Value: !GetAtt KinesisStream.Arn
      Export:
        Name: ${self:custom.subsys}-event-hub-${opt:stage}.stream1Arn
